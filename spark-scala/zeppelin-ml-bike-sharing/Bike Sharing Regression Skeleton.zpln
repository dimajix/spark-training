{"paragraphs":[{"text":"%md\n# Load Data into Hive","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102698_-553084744","id":"20160617-174039_903096095","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Load Data into Hive</h1>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:421"},{"text":"%sql\ncreate database if not exists training","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102699_-553469493","id":"20170108-055306_2008372397","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:422"},{"text":"%sql\ncreate external table if not exists training.bike_sharing(\n    row_id int,\n    date date,\n    season int,\n    year int,\n    month int,\n    hour int,\n    holiday int,\n    weekday int,\n    workingday int,\n    weather int,\n    temperature double,\n    apparent_temperature double,\n    humidity double,\n    wind_speed double,\n    casual int,\n    registered int,\n    counter int) \nROW FORMAT DELIMITED FIELDS TERMINATED BY ','\nSTORED AS TEXTFILE\nLOCATION 's3://dimajix-training/data/bike-sharing'","dateUpdated":"2017-01-31T10:57:06-0800","config":{"enabled":true,"tableHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102699_-553469493","id":"20160617-174039_2069135316","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:423"},{"text":"%sql\nselect * from training.bike_sharing limit 10","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102700_-555393238","id":"20160617-174039_1754560141","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:424"},{"text":"%md\n# Alternative: Load Data from File","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102700_-555393238","id":"20160617-174039_1794332830","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Alternative: Load Data from File</h1>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:425"},{"text":"import org.apache.spark.sql.Row\nimport org.apache.spark.sql.types._\n\nval schema = StructType(Array(\n    StructField(\"row_id\",StringType,true),\n    StructField(\"date\",DateType, true),\n    StructField(\"season\",IntegerType, true),\n    StructField(\"year\",IntegerType, true),\n    StructField(\"month\",IntegerType, true),\n    StructField(\"hour\",IntegerType, true),\n    StructField(\"holiday\",IntegerType, true),\n    StructField(\"weekday\",IntegerType, true),\n    StructField(\"workingday\",IntegerType, true),\n    StructField(\"weather\",IntegerType, true),\n    StructField(\"temperature\",FloatType, true),\n    StructField(\"apparent_temperature\",FloatType, true),\n    StructField(\"humidity\",FloatType, true),\n    StructField(\"wind_speed\",FloatType, true),\n    StructField(\"casual\",IntegerType, true),\n    StructField(\"registered\",IntegerType, true),\n    StructField(\"counter\",IntegerType, true)\n    ))\n    \nval data = spark.read.schema(schema).csv(\"s3://dimajix-training/data/bike-sharing\")","dateUpdated":"2017-01-31T10:57:06-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102700_-555393238","id":"20160617-174039_239018989","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:426"},{"text":"data.toZeppelin(10)","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"row_id","index":0,"aggr":"sum"}],"values":[{"name":"date","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"row_id","index":0,"aggr":"sum"},"yAxis":{"name":"date","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102701_-555777987","id":"20160617-174039_1397728233","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:427"},{"text":"%md\n# Prepare Data","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102701_-555777987","id":"20160617-174039_294797498","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Prepare Data</h1>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:428"},{"text":"val data = sqlContext.table(\"training.bike_sharing\")\nval ddata = data.select(\n        $\"date\",\n        unix_timestamp($\"date\", \"yyyy-MM-dd\").cast(DoubleType).alias(\"ts\"),\n        $\"season\".cast(\"Double\"),\n        $\"year\".cast(\"Double\"),\n        $\"month\".cast(\"Double\"),\n        $\"hour\".cast(\"Double\"),\n        $\"holiday\".cast(\"Double\"),\n        $\"weekday\".cast(\"Double\"),\n        $\"workingday\".cast(\"Double\"),\n        $\"weather\".cast(\"Double\"),\n        $\"temperature\".cast(\"Double\"),\n        $\"apparent_temperature\".cast(\"Double\"),\n        $\"humidity\".cast(\"Double\"),\n        $\"wind_speed\".cast(\"Double\"),\n        $\"casual\".cast(DoubleType),\n        $\"registered\".cast(DoubleType),\n        $\"counter\".cast(DoubleType)\n    )\n    ","dateUpdated":"2017-01-31T11:09:41-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102701_-555777987","id":"20160617-174039_416775257","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:429"},{"text":"%md\n# Cache Data\n\nSince ddata will now be our basis for all sorts of processing, we want to cache it.","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102702_-554623740","id":"20160617-174039_1797571532","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Cache Data</h1>\n<p>Since ddata will now be our basis for all sorts of processing, we want to cache it.</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:430"},{"text":"ddata.cache()","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102702_-554623740","id":"20160617-174039_984792328","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:431"},{"text":"%md\n# Make some nice Pictures\n\nThe original data contains rents per hour, we want to have the data per day. Maybe we can already see some patterns here?","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102702_-554623740","id":"20160617-174039_748189267","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Make some nice Pictures</h1>\n<p>The original data contains rents per hour, we want to have the data per day. Maybe we can already see some patterns here?</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:432"},{"text":"// Generate Table with summed data per day","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"ts","index":0,"aggr":"sum"}],"values":[{"name":"sum(counter)","index":1,"aggr":"sum"}],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102703_-555008489","id":"20160617-174039_1300257284","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:433"},{"text":"// Generate Table with summed data per day, only for casual renters","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"ts","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"ts","index":0,"aggr":"sum"}}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102703_-555008489","id":"20160617-174039_630580316","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:434"},{"text":"// Generate Table with summed data per day, only for registered renters","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"ts","index":0,"aggr":"sum"}],"values":[{"name":"sum(counter)","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"ts","index":0,"aggr":"sum"},"yAxis":{"name":"sum(counter)","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102703_-555008489","id":"20160617-174039_331573067","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:435"},{"text":"%md\n# Initial Statistics on Values","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102703_-555008489","id":"20160617-174039_261413913","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Initial Statistics on Values</h1>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:436"},{"text":"// Print some initial statistics for every column in the dataframe using the stats() method from RDD\n\n","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102704_-544620269","id":"20160617-174039_1979577676","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:437"},{"text":"%md\n# Linear Regression\n\nNow we want to perform all steps required for creating a predictive model via a linear regression. We will do this in multiple steps:\n\n1. Create a Helper Function for Extracting Feature Vectors\n2. Transform the DataFrame using Helper Function\n3. Split Data into Training Data and Test Data\n4. Create Model\n5. Perform Predictions\n6. Evaluate Model","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102704_-544620269","id":"20160617-174039_1945341208","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Linear Regression</h1>\n<p>Now we want to perform all steps required for creating a predictive model via a linear regression. We will do this in multiple steps:</p>\n<ol>\n<li>Create a Helper Function for Extracting Feature Vectors</li>\n<li>Transform the DataFrame using Helper Function</li>\n<li>Split Data into Training Data and Test Data</li>\n<li>Create Model</li>\n<li>Perform Predictions</li>\n<li>Evaluate Model</li>\n</ol>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:438"},{"text":"%md\n## 1. Extract Vectors for Regression\n\nSpark ML requires a special type \"Vector\" for representing features. Therefore we need to build these Vectors from all columns that we want to use as a vector.","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102704_-544620269","id":"20160617-174039_2058640928","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>1. Extract Vectors for Regression</h2>\n<p>Spark ML requires a special type &ldquo;Vector&rdquo; for representing features. Therefore we need to build these Vectors from all columns that we want to use as a vector.</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:439"},{"text":"import org.apache.spark.ml.linalg.Vectors\n\ndef extract_vector(row:Row, cols:Array[Int]) = ...\n\nprintln(extract_vector(Row(\"Bob\",23.0), Array(1)))\n","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102705_-545005018","id":"20160617-174039_1469040079","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:440"},{"text":"%md\n## 2. Transform DataFrame\n\nNow that we have extract_vector, we can use it in order to extract the relevant features from our DataFrame","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102705_-545005018","id":"20160617-174039_537118194","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>2. Transform DataFrame</h2>\n<p>Now that we have extract_vector, we can use it in order to extract the relevant features from our DataFrame</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:441"},{"text":"// Use the following columns for extracting the Features\nval cols = Array(1,2,3,4,5,6,7,8,9,10,11,12,13)\n\n// Transform all records ddata into tuples (feature, counter)\n// counter can be found in column row(16)\n// the resulting columns should be called \"features\" and \"counter\"\nval features_labels = ...\n\n// Peek inside the new dataframe\nfeatures_labels.toZeppelin(6)\n","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"features","index":0,"aggr":"sum"}],"values":[{"name":"counter","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"features","index":0,"aggr":"sum"}}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102705_-545005018","id":"20160617-174039_1471718217","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:442"},{"text":"%md\n## 3. Split Data into Training Data and Test Data","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102705_-545005018","id":"20160617-174039_451426973","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>3. Split Data into Training Data and Test Data</h2>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:443"},{"text":"// Initialize train_data and test_data\n...\n\nprintln(train_data.count())\nprintln(test_data.count())","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102706_-543850771","id":"20160617-174039_73410360","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:444"},{"text":"%md\n## 4. Perform Simple Linear Regression\n\nWe simply need to create an instance of a LinearRegression, set input and target column names and the prediction column name.","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102706_-543850771","id":"20160617-174039_1152307142","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>4. Perform Simple Linear Regression</h2>\n<p>We simply need to create an instance of a LinearRegression, set input and target column names and the prediction column name.</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:445"},{"text":"import org.apache.spark.ml.regression._\n\n","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102706_-543850771","id":"20160617-174039_818606948","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:446"},{"text":"%md\n### Peek Inside the Model","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102707_-544235520","id":"20160617-174039_1546732354","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Peek Inside the Model</h3>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:447"},{"text":"","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102707_-544235520","id":"20160617-174039_641126743","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:448"},{"text":"println(s\"Explained Variance = ${model.summary.explainedVariance}\")\nprintln(s\"MSE = ${model.summary.meanSquaredError}\")\nprintln(s\"RMSE = ${model.summary.rootMeanSquaredError}\")\nprintln(s\"r2 = ${model.summary.r2}\")\n\nprintln(s\"pValues = ${model.summary.pValues.mkString(\",\")}\")\nprintln(s\"tValues = ${model.summary.tValues.mkString(\",\")}\")","dateUpdated":"2017-01-31T11:10:54-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102707_-544235520","id":"20160617-174039_1491712602","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:449"},{"text":"val statistics = cols.zipWithIndex.map { \n        case (col,idx) => (\n             ddata.schema(col).name, \n             model.coefficients(idx),\n             model.summary.coefficientStandardErrors(idx),\n             model.summary.tValues(idx), \n             model.summary.pValues(idx)\n        )\n    }.toSeq\n    .toDS\n    .withColumnRenamed(\"_1\", \"feature\")\n    .withColumnRenamed(\"_2\", \"coefficient\")\n    .withColumnRenamed(\"_3\", \"stdError\")\n    .withColumnRenamed(\"_4\", \"tValue\")\n    .withColumnRenamed(\"_5\", \"pValue\")\n\n\nstatistics.toZeppelin()","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102708_-546159264","id":"20170108-055714_820098938","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:450"},{"text":"%md\n## 5. Perform Predictions\n\nPredict new Data by applying the model to the test data","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102708_-546159264","id":"20160617-174039_1489606736","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>5. Perform Predictions</h2>\n<p>Predict new Data by applying the model to the test data</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:451"},{"text":"","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102708_-546159264","id":"20160617-174039_456055226","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:452"},{"text":"%md\n## 6. Evaluate Model\n\nFinally we want to evaluate our model, i.e. calculate a metric which tells us the quality of predictions.","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102709_-546544013","id":"20160617-174039_551047239","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>6. Evaluate Model</h2>\n<p>Finally we want to evaluate our model, i.e. calculate a metric which tells us the quality of predictions.</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:453"},{"text":"\n","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102709_-546544013","id":"20160617-174039_1501460009","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:454"},{"text":"%md\n# VectorAssembler instead of Manual Feature Extraction\n\nManual feature extraction (i.e. creation of the Vector) is a little bit tedious and not very comfortable. But luckily, there is a valuable helper called VectorAssembler.\n\nWe use it to automatically extract the columns\n\n    season, year, month, hour, holiday, weekday, workingday, weather, \n    temperature, apparent_temperature, humidity, wind_speed\n\ninto the new output column 'features'\n\nSo we will again create a regression, but in a cleaner way.\n\n1. Split Data into Training and Validation Set\n2. Create Features Using Vector Assembler and Train Model\n3. Predict Data\n4. Evaluate Model","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102709_-546544013","id":"20160617-174039_2105519013","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>VectorAssembler instead of Manual Feature Extraction</h1>\n<p>Manual feature extraction (i.e. creation of the Vector) is a little bit tedious and not very comfortable. But luckily, there is a valuable helper called VectorAssembler.</p>\n<p>We use it to automatically extract the columns</p>\n<pre><code>season, year, month, hour, holiday, weekday, workingday, weather, \ntemperature, apparent_temperature, humidity, wind_speed\n</code></pre>\n<p>into the new output column 'features'</p>\n<p>So we will again create a regression, but in a cleaner way.</p>\n<ol>\n<li>Split Data into Training and Validation Set</li>\n<li>Create Features Using Vector Assembler and Train Model</li>\n<li>Predict Data</li>\n<li>Evaluate Model</li>\n</ol>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:455"},{"text":"%md\n## Vector Assembler\n\nBefore beginning with the regression, lets have a look how a VectorAssembler works, and why it can help us.","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102710_-545389766","id":"20160617-174039_1222516225","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Vector Assembler</h2>\n<p>Before beginning with the regression, lets have a look how a VectorAssembler works, and why it can help us.</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:456"},{"text":"\n","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102710_-545389766","id":"20160617-174039_1854142726","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:457"},{"text":"td.printSchema()","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102711_-545774515","id":"20160617-174039_441594265","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:458"},{"text":"%md\n## 1. Split Train and Test Data\n\nSince we found an easier way to generate features, we split incoming data first and apply the VectorAssembler","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102711_-545774515","id":"20160617-174039_171327823","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>1. Split Train and Test Data</h2>\n<p>Since we found an easier way to generate features, we split incoming data first and apply the VectorAssembler</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:459"},{"text":"val Array(train_data, test_data) = ddata.randomSplit(Array(0.8,0.2), seed=0)\nprintln(train_data.count())\nprintln(test_data.count())","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102711_-545774515","id":"20160617-174039_1878634181","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:460"},{"text":"%md\n## 2. Perform Regression\n\n1. Apply VectorAssembler\n2. Perform Fitting","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102711_-545774515","id":"20160617-174039_1900101873","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>2. Perform Regression</h2>\n<ol>\n<li>Apply VectorAssembler</li>\n<li>Perform Fitting</li>\n</ol>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:461"},{"text":"val asm = ...\n\nval regression = ...\n\nval model = ...","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102712_-547698260","id":"20160617-174039_1930348621","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:462"},{"text":"%md\n## 3. Predict\n\nMake predictions from test data and print some results","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102712_-547698260","id":"20160617-174039_1333817918","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>3. Predict</h2>\n<p>Make predictions from test data and print some results</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:463"},{"text":"val prediction = ...\n\nprediction.toZeppelin(10)","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102712_-547698260","id":"20160617-174039_2043440440","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:464"},{"text":"%md\n## 4. Evaluate Model\n\nFinally lets evaluate the prediction","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102713_-548083009","id":"20160617-174039_1544992256","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>4. Evaluate Model</h2>\n<p>Finally lets evaluate the prediction</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:465"},{"text":"","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102713_-548083009","id":"20160617-174039_1460070715","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:466"},{"text":"%md\n# Make new Pictures of Predictions\n\nLet us visually compare the prediction with the true values for the validation data set.","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102713_-548083009","id":"20160617-174039_112872736","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Make new Pictures of Predictions</h1>\n<p>Let us visually compare the prediction with the true values for the validation data set.</p>\n"},"dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:467"},{"text":"z.show(\n    prediction\n        .groupBy(\"ts\").agg(sum(\"counter\"), sum(\"prediction\")) \n        .orderBy(\"ts\")\n)","dateUpdated":"2017-01-31T09:40:05-0800","config":{"enabled":true,"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"ts","index":0,"aggr":"sum"}],"values":[{"name":"sum(counter)","index":1,"aggr":"sum"},{"name":"sum(prediction)","index":2,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"ts","index":0,"aggr":"sum"},"yAxis":{"name":"sum(counter)","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102714_-546928762","id":"20160617-174039_824013651","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:468"},{"text":"","dateUpdated":"2017-01-31T09:35:02-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485884102714_-546928762","id":"20160617-174039_75392854","dateCreated":"2017-01-31T09:35:02-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:469"}],"name":"Bike Sharing Regression Skeleton","id":"2CAF9P355","angularObjects":{"2C73P7NJN:shared_process":[],"2C7KU6EWG:shared_process":[],"2C8H7AG7Q:shared_process":[],"2CANY5QMM:shared_process":[],"2C7YM9SBT:shared_process":[],"2CAHZM5EW:shared_process":[],"2CA194TC4:shared_process":[],"2C85Z5A3J:shared_process":[],"2C77BBC6M:shared_process":[],"2C9T8R64M:shared_process":[],"2C82H3SUX:shared_process":[],"2C7W1UTSM:shared_process":[],"2C99CAHNC:shared_process":[],"2C7VKNJZ3:shared_process":[],"2C7MNAP62:shared_process":[],"2C8SJ4SC1:shared_process":[],"2C8273BS9:shared_process":[],"2CA9V89Q3:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}