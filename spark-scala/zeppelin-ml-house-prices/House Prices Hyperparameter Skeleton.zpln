{"paragraphs":[{"text":"%md\n# Load Data\nFirst we load the data from S3. We use the built-in \"csv\" method, which can use the first line has column names and which also supports infering the schema automatically. We use both and save some code for specifying the schema explictly.\n\nWe also peek inside the data by retrieving the first five records.","dateUpdated":"2018-03-20T19:32:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Load Data</h1>\n<p>First we load the data from S3. We use the built-in &ldquo;csv&rdquo; method, which can use the first line has column names and which also supports infering the schema automatically. We use both and save some code for specifying the schema explictly.</p>\n<p>We also peek inside the data by retrieving the first five records.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521574340019_-1837054984","id":"20180224-150345_1979378836","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6423"},{"text":"val rawData = spark.read\n    .option(\"header\",\"true\")\n    .option(\"inferSchema\",\"true\")\n    .csv(\"s3://dimajix-training/data/kc-house-data/\")\n\nz.show(rawData.limit(10))","dateUpdated":"2018-03-20T19:32:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340019_-1837054984","id":"20180224-145450_1588429371","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6424"},{"text":"// Split the data - 80% for training, 20% for validation\nval Array(trainData, validationData) = rawData.randomSplit(Array(0.8,0.2))\n\nprintln(s\"traingData = ${trainData.count}\")\nprintln(s\"validationData = ${validationData.count}\")","dateUpdated":"2018-03-20T19:32:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340019_-1837054984","id":"20180304-103415_198808093","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6425"},{"text":"%md\n# Create Pipeline\n\nWe reuse the long pipeline from last time. This time we want to tweak additional parameters, so called *Hyper-Parameters*","dateUpdated":"2018-03-20T19:32:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Create Pipeline</h1>\n<p>We reuse the long pipeline from last time. This time we want to tweak additional parameters, so called <em>Hyper-Parameters</em></p>\n"}]},"apps":[],"jobName":"paragraph_1521574340020_-1838978729","id":"20180310-145908_1673430871","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6426"},{"text":"import org.apache.spark.ml.feature._\nimport org.apache.spark.ml.regression._\n\n\nval stages = Array(\n    new StringIndexer()\n        .setInputCol(\"bathrooms\")\n        .setOutputCol(\"bathrooms_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"bathrooms_idx\")\n        .setOutputCol(\"bathrooms_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"bedrooms\")\n        .setOutputCol(\"bedrooms_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"bedrooms_idx\")\n        .setOutputCol(\"bedrooms_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"floors\")\n        .setOutputCol(\"floors_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"floors_idx\")\n        .setOutputCol(\"floors_onehot\"),\n    new OneHotEncoder()\n        .setInputCol(\"view\")\n        .setOutputCol(\"view_onehot\"),\n    new OneHotEncoder()\n        .setInputCol(\"condition\")\n        .setOutputCol(\"condition_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"grade\")\n        .setOutputCol(\"grade_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"grade_idx\")\n        .setOutputCol(\"grade_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"zipcode\")\n        .setOutputCol(\"zipcode_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"zipcode_idx\")\n        .setOutputCol(\"zipcode_onehot\"),\n    new VectorAssembler()\n        .setInputCols(Array(\"bedrooms_onehot\", \"bathrooms_onehot\", \"sqft_living\", \"sqft_lot\", \"floors_onehot\", \"waterfront\", \"view_onehot\", \"condition_onehot\", \"grade_onehot\", \"sqft_above\", \"sqft_basement\", \"yr_built\", \"yr_renovated\", \"zipcode_onehot\", \"sqft_living15\", \"sqft_lot15\"))\n        .setOutputCol(\"features\"),\n    new LinearRegression()\n        .setFeaturesCol(\"features\")\n        .setLabelCol(\"price\")\n        .setPredictionCol(\"linear_prediction\"),\n    new GeneralizedLinearRegression()\n        .setFeaturesCol(\"features\")\n        .setLabelCol(\"price\")\n        .setFamily(\"poisson\")\n        .setLink(\"log\")\n        .setPredictionCol(\"poisson_prediction\"),\n    new VectorAssembler()\n        .setInputCols(Array(\"linear_prediction\",\"poisson_prediction\"))\n        .setOutputCol(\"pred_features\"),\n    new LinearRegression()\n        .setFeaturesCol(\"pred_features\")\n        .setLabelCol(\"price\")\n        .setPredictionCol(\"prediction\")\n    \n)\n\nval pipe = new Pipeline().setStages(stages)","dateUpdated":"2018-03-20T19:32:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340020_-1838978729","id":"20180310-125337_48072730","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6427"},{"text":"%md\n# Hyper Parameter Tuning\n\nThe whole pipeline has some parameters which have an influence on the result, i.e. the accuracy. For example the size of the n-grams will probably have a big impact and also the minDF parameter of the CountVecttorizer will probably have some impact. These settings are called \"hyper parameters\", because they are also model parameters, but not learnt directly during the training phase. But which parameters work best?\n\nWe will use a CrossValidation to select the best set of hyperparameters.","dateUpdated":"2018-03-20T19:32:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Hyper Parameter Tuning</h1>\n<p>The whole pipeline has some parameters which have an influence on the result, i.e. the accuracy. For example the size of the n-grams will probably have a big impact and also the minDF parameter of the CountVecttorizer will probably have some impact. These settings are called &ldquo;hyper parameters&rdquo;, because they are also model parameters, but not learnt directly during the training phase. But which parameters work best?</p>\n<p>We will use a CrossValidation to select the best set of hyperparameters.</p>\n"}]},"apps":[],"jobName":"paragraph_1521574340020_-1838978729","id":"20180310-152535_117636103","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6428"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-03-20T19:32:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340020_-1838978729","id":"20180310-152324_1493015438","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6429"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-03-20T19:32:57+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340020_-1838978729","id":"20180310-152426_996034994","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6430"},{"text":"%md\n## Create ParamGrid\n\nNow we create a param grid that should be used for using different sets of parameters. We want to tweak three parameters:\n\n* `elasticNetParam` of first LinearRegression  should take values in [0.25,0.5,0.75]\n* `regParam` of first LinearRegression  should take values in [0.01, 0.1, 0.3]\n* `link` opf the GeneralizedLinearRegression should take values in [\"identity\", \"log\"])\n\nIn order to create this grid, we first need to retrieve the corresponding stages from the pipeline, so we can access its parameters.","dateUpdated":"2018-03-20T19:32:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Create ParamGrid</h2>\n<p>Now we create a param grid that should be used for using different sets of parameters. We want to tweak three parameters:</p>\n<ul>\n<li><code>elasticNetParam</code> of first LinearRegression  should take values in [0.25,0.5,0.75]</li>\n<li><code>regParam</code> of first LinearRegression  should take values in [0.01, 0.1, 0.3]</li>\n<li><code>link</code> opf the GeneralizedLinearRegression should take values in [&ldquo;identity&rdquo;, &ldquo;log&rdquo;])</li>\n</ul>\n<p>In order to create this grid, we first need to retrieve the corresponding stages from the pipeline, so we can access its parameters.</p>\n"}]},"apps":[],"jobName":"paragraph_1521574340020_-1838978729","id":"20180310-152503_2061332323","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6431"},{"text":"import org.apache.spark.ml.tuning.ParamGridBuilder\n\n// YOUR CODE HERE\n","dateUpdated":"2018-03-20T19:33:11+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340020_-1838978729","id":"20180310-152600_874798935","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6432"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574803324_162142984","id":"20180320-194003_1544645256","dateCreated":"2018-03-20T19:40:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7586","text":"%md\n## Create a CrossValidator\nNow we have a set of hyper parameters which should all be tested and the best set of parameters should eventually be selected. Spark offers some support for that to offload the coding by so called validators. We will use the `CrossValidator` from the package `org.apache.spark.ml.tuning`. The validator requires an estimator to fit (in our case a `Pipeline`) and an evaluator to assess the performance of each value of the hyper parameters (we will use the `RegressionEvaluator` again).","dateUpdated":"2018-03-20T19:40:04+0000","dateFinished":"2018-03-20T19:40:04+0000","dateStarted":"2018-03-20T19:40:04+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Create a CrossValidator</h2>\n<p>Now we have a set of hyper parameters which should all be tested and the best set of parameters should eventually be selected. Spark offers some support for that to offload the coding by so called validators. We will use the <code>CrossValidator</code> from the package <code>org.apache.spark.ml.tuning</code>. The validator requires an estimator to fit (in our case a <code>Pipeline</code>) and an evaluator to assess the performance of each value of the hyper parameters (we will use the <code>RegressionEvaluator</code> again).</p>\n</div>"}]}},{"text":"import org.apache.spark.ml.evaluation._\nimport org.apache.spark.ml.tuning._\n\n// YOUR CODE HERE\n    ","dateUpdated":"2018-03-20T19:33:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340021_-1839363478","id":"20180310-145710_924247341","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6433"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574788327_-1191049546","id":"20180320-193948_445342116","dateCreated":"2018-03-20T19:39:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7516","text":"%md\n## Fitting a Model\nThe `CrossValidator` again works as an `Estimator` with a `fit` method which will create an appropriate model.","dateUpdated":"2018-03-20T19:39:50+0000","dateFinished":"2018-03-20T19:39:50+0000","dateStarted":"2018-03-20T19:39:50+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Fitting a Model</h2>\n<p>The <code>CrossValidator</code> again works as an <code>Estimator</code> with a <code>fit</code> method which will create an appropriate model.</p>\n</div>"}]}},{"text":"// YOUR CODE HERE","dateUpdated":"2018-03-20T19:33:55+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340021_-1839363478","id":"20180310-145533_1332151548","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6434"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574859204_-886405038","id":"20180320-194059_31142088","dateCreated":"2018-03-20T19:40:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7655","text":"%md\n## Assess Performance\nEventually we want to verify the performance using the same validator as used for tuning, but with the validation data instead of the training data.","dateUpdated":"2018-03-20T19:41:00+0000","dateFinished":"2018-03-20T19:41:00+0000","dateStarted":"2018-03-20T19:41:00+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Assess Performance</h2>\n<p>Eventually we want to verify the performance using the same validator as used for tuning, but with the validation data instead of the training data.</p>\n</div>"}]}},{"text":"\nval pred = // YOUR CODE HERE\nval rmse = // YOUR CODE HERE\n\nprintln(s\"RMSE = $rmse\")","dateUpdated":"2018-03-20T19:34:08+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340021_-1839363478","id":"20180310-152639_126013484","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6435"},{"dateUpdated":"2018-03-20T19:32:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521574340021_-1839363478","id":"20180310-125739_1025770034","dateCreated":"2018-03-20T19:32:20+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6436"}],"name":"House Prices Hyperparameter Skeleton","id":"2D8MJJV4Q","angularObjects":{"2D8DSN3N4:shared_process":[],"2D7W55G1J:shared_process":[],"2DA3X6UGN:shared_process":[],"2D9HTU14T:shared_process":[],"2DBA6X8JB:shared_process":[],"2DBSCZXK2:shared_process":[],"2D9M853BP:shared_process":[],"2DAXFQ4X2:shared_process":[],"2DB3TEGGU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}