{"paragraphs":[{"text":"%md\n# Analysing Audioscrobbler Data\n\nIn this notebook we want to create two very simple statistics on artists from data provided by Audioscrobbler. We are working with three related data sets:\n\n1. A list of users containing their number of plays per artist\n2. A list which maps a generic artist-id to its real (band) name\n3. A list which maps bad artist ids to good ones (fixing typing errors)\n\nThen we will ask two simple questions:\n1. Which artists have the most listeners (in terms of number of unique users)\n2. Which artists are played most often (in terms of total play counts)","user":"anonymous","dateUpdated":"2018-04-10T06:02:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Analysing Audioscrobbler Data</h1>\n<p>In this notebook we want to create two very simple statistics on artists from data provided by Audioscrobbler. We are working with three related data sets:</p>\n<ol>\n<li>A list of users containing their number of plays per artist</li>\n<li>A list which maps a generic artist-id to its real (band) name</li>\n<li>A list which maps bad artist ids to good ones (fixing typing errors)</li>\n</ol>\n<p>Then we will ask two simple questions:</p>\n<ol>\n<li>Which artists have the most listeners (in terms of number of unique users)</li>\n<li>Which artists are played most often (in terms of total play counts)</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1523339982784_1618269886","id":"20180410-055942_688799353","dateCreated":"2018-04-10T05:59:42+0000","dateStarted":"2018-04-10T06:02:22+0000","dateFinished":"2018-04-10T06:02:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5807"},{"text":"import org.apache.spark.sql.types._","user":"anonymous","dateUpdated":"2018-04-10T05:38:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types._\n"}]},"apps":[],"jobName":"paragraph_1523338682665_371060092","id":"20180410-053802_720924579","dateCreated":"2018-04-10T05:38:02+0000","dateStarted":"2018-04-10T05:38:10+0000","dateFinished":"2018-04-10T05:38:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5808"},{"text":"%md\n# Preparations\n\nBefore we jump into the questions, we first read in all data and apply the mapping of bad artist IDs to good artist ids.","user":"anonymous","dateUpdated":"2018-04-10T06:03:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Preparations</h1>\n<p>Before we jump into the questions, we first read in all data and apply the mapping of bad artist IDs to good artist ids.</p>\n"}]},"apps":[],"jobName":"paragraph_1523340146301_771250378","id":"20180410-060226_1821926409","dateCreated":"2018-04-10T06:02:26+0000","dateStarted":"2018-04-10T06:03:31+0000","dateFinished":"2018-04-10T06:03:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5809"},{"text":"%md\n## P1. Read in User-Artist-Data\n\nFirst we read in the most important data set, containing the information how often a user played songs of a specific artist. This information is stored in the file at `s3://dimajix-training/data/audioscrobbler/user_artist_data/`. The file has the following characteristics:\n* Format: CSV (kind of)\n* Separator: Space (\" \")\n* Header: No\n* Fields: user_id (INT), artist_id(INT), play_count(INT)\n\nSo we need to read in this file and store it in a local variable `user_artist_data`. Since we do not have any header contained in the file itself, we need to specify the schema explicitly.","user":"anonymous","dateUpdated":"2018-04-10T06:06:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>P1. Read in User-Artist-Data</h2>\n<p>First we read in the most important data set, containing the information how often a user played songs of a specific artist. This information is stored in the file at <code>s3://dimajix-training/data/audioscrobbler/user_artist_data/</code>. The file has the following characteristics:</p>\n<ul>\n<li>Format: CSV (kind of)</li>\n<li>Separator: Space (&rdquo; &ldquo;)</li>\n<li>Header: No</li>\n<li>Fields: user_id (INT), artist_id(INT), play_count(INT)</li>\n</ul>\n<p>So we need to read in this file and store it in a local variable <code>user_artist_data</code>. Since we do not have any header contained in the file itself, we need to specify the schema explicitly.</p>\n"}]},"apps":[],"jobName":"paragraph_1523340220612_1687461747","id":"20180410-060340_1957766096","dateCreated":"2018-04-10T06:03:40+0000","dateStarted":"2018-04-10T06:06:30+0000","dateFinished":"2018-04-10T06:06:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5810"},{"text":"val schema = StructType(\n        StructField(\"user_id\", IntegerType) ::\n        StructField(\"artist_id\", IntegerType) ::\n        StructField(\"play_count\", IntegerType) ::\n        Nil\n    )\n    \nval user_artist_data = spark.read\n    .option(\"sep\", \" \")\n    .option(\"header\", false)\n    .schema(schema)\n    .csv(\"s3://dimajix-training/data/audioscrobbler/user_artist_data/\")\n    \nz.show(user_artist_data, 10)","user":"anonymous","dateUpdated":"2018-04-10T05:59:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"schema: org.apache.spark.sql.types.StructType = StructType(StructField(user_id,IntegerType,true), StructField(artist_id,IntegerType,true), StructField(play_count,IntegerType,true))\nuser_artist_data: org.apache.spark.sql.DataFrame = [user_id: int, artist_id: int ... 1 more field]\n"},{"type":"TABLE","data":"user_id\tartist_id\tplay_count\n1000002\t1\t55\n1000002\t1000006\t33\n1000002\t1000007\t8\n1000002\t1000009\t144\n1000002\t1000010\t314\n1000002\t1000013\t8\n1000002\t1000014\t42\n1000002\t1000017\t69\n1000002\t1000024\t329\n1000002\t1000025\t1\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 10.</font>"}]},"apps":[],"jobName":"paragraph_1523338385370_2055077024","id":"20180410-053305_1209301817","dateCreated":"2018-04-10T05:33:05+0000","dateStarted":"2018-04-10T05:59:11+0000","dateFinished":"2018-04-10T05:59:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5811"},{"text":"%md\n## P2 Read in artist aliases\n\nNow we read in a file containing mapping of bad artist IDs to good IDs. This fixes typos in the artists names and thereby enables us to merge information with different artist IDs belonging to the same band. This information is stored in the file at `s3://dimajix-training/data/audioscrobbler/artist_alias/`. The file has the following characteristics:\n* Format: CSV (kind of)\n* Separator: Tab (\"\\t\")\n* Header: No\n* Fields: bad_id (INT), good_id(INT)\n\nSo we need to read in this file and store it in a local variable `artist_alias`. Since we do not have any header contained in the file itself, we need to specify the schema explicitly.","user":"anonymous","dateUpdated":"2018-04-10T06:08:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>P2 Read in artist aliases</h2>\n<p>Now we read in a file containing mapping of bad artist IDs to good IDs. This fixes typos in the artists names and thereby enables us to merge information with different artist IDs belonging to the same band. This information is stored in the file at <code>s3://dimajix-training/data/audioscrobbler/artist_alias/</code>. The file has the following characteristics:</p>\n<ul>\n<li>Format: CSV (kind of)</li>\n<li>Separator: Tab (&ldquo;\\t&rdquo;)</li>\n<li>Header: No</li>\n<li>Fields: bad_id (INT), good_id(INT)</li>\n</ul>\n<p>So we need to read in this file and store it in a local variable <code>artist_alias</code>. Since we do not have any header contained in the file itself, we need to specify the schema explicitly.</p>\n"}]},"apps":[],"jobName":"paragraph_1523340396881_1766178741","id":"20180410-060636_826552422","dateCreated":"2018-04-10T06:06:36+0000","dateStarted":"2018-04-10T06:08:43+0000","dateFinished":"2018-04-10T06:08:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5812"},{"text":"val schema = StructType(\n        StructField(\"bad_id\", IntegerType) ::\n        StructField(\"good_id\", IntegerType) ::\n        Nil\n    )\n    \nval artist_alias = spark.read\n    .option(\"sep\",\"\\t\")\n    .option(\"header\", false)\n    .schema(schema)\n    .csv(\"s3://dimajix-training/data/audioscrobbler/artist_alias/\")\n    \nz.show(artist_alias, 10)","user":"anonymous","dateUpdated":"2018-04-10T05:43:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"schema: org.apache.spark.sql.types.StructType = StructType(StructField(bad_id,IntegerType,true), StructField(good_id,IntegerType,true))\nartist_alias: org.apache.spark.sql.DataFrame = [bad_id: int, good_id: int]\n"},{"type":"TABLE","data":"bad_id\tgood_id\n1092764\t1000311\n1095122\t1000557\n6708070\t1007267\n10088054\t1042317\n1195917\t1042317\n1112006\t1000557\n1187350\t1294511\n1116694\t1327092\n6793225\t1042317\n1079959\t1000557\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 10.</font>"}]},"apps":[],"jobName":"paragraph_1523338429768_-1111345127","id":"20180410-053349_315669178","dateCreated":"2018-04-10T05:33:49+0000","dateStarted":"2018-04-10T05:43:52+0000","dateFinished":"2018-04-10T05:44:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5813"},{"text":"%md\n## P3 Read in artist aliases\n\nThe third file contains the artists name for his/her id. We also use this file in order to be able to display results with the artists names instead of their IDs. This information is stored in the file at `s3://dimajix-training/data/audioscrobbler/artist_data/`. The file has the following characteristics:\n* Format: CSV (kind of)\n* Separator: Tab (\"\\t\")\n* Header: No\n* Fields: artist_id (INT), artist_name(STRING)\n\nSo we need to read in this file and store it in a local variable `artist_data`. Since we do not have any header contained in the file itself, we need to specify the schema explicitly.","user":"anonymous","dateUpdated":"2018-04-10T06:10:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>P3 Read in artist aliases</h2>\n<p>The third file contains the artists name for his/her id. We also use this file in order to be able to display results with the artists names instead of their IDs. This information is stored in the file at <code>s3://dimajix-training/data/audioscrobbler/artist_data/</code>. The file has the following characteristics:</p>\n<ul>\n<li>Format: CSV (kind of)</li>\n<li>Separator: Tab (&ldquo;\\t&rdquo;)</li>\n<li>Header: No</li>\n<li>Fields: artist_id (INT), artist_name(STRING)</li>\n</ul>\n<p>So we need to read in this file and store it in a local variable <code>artist_data</code>. Since we do not have any header contained in the file itself, we need to specify the schema explicitly.</p>\n"}]},"apps":[],"jobName":"paragraph_1523340529741_1335076082","id":"20180410-060849_2002551425","dateCreated":"2018-04-10T06:08:49+0000","dateStarted":"2018-04-10T06:10:09+0000","dateFinished":"2018-04-10T06:10:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5814"},{"text":"val schema = StructType(\n        StructField(\"artist_id\", IntegerType) ::\n        StructField(\"artist_name\", StringType) ::\n        Nil\n    )\n\nval artist_data = spark.read\n    .option(\"sep\",\"\\t\")\n    .option(\"header\",false)\n    .schema(schema)\n    .csv(\"s3://dimajix-training/data/audioscrobbler/artist_data/\")\n    \nz.show(artist_data, 10)","user":"anonymous","dateUpdated":"2018-04-10T05:44:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"schema: org.apache.spark.sql.types.StructType = StructType(StructField(artist_id,IntegerType,true), StructField(artist_name,StringType,true))\nartist_data: org.apache.spark.sql.DataFrame = [artist_id: int, artist_name: string]\n"},{"type":"TABLE","data":"artist_id\tartist_name\n1134999\t06Crazy Life\n6821360\tPang Nakarin\n10113088\tTerfel, Bartoli- Mozart: Don\n10151459\tThe Flaming Sidebur\n6826647\tBodenstandig 3000\n10186265\tJota Quest e Ivete Sangalo\n6828986\tToto_XX (1977\n10236364\tU.S Bombs -\n1135000\tartist formaly know as Mat\n10299728\tKassierer - Musik für beide Ohren\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 10.</font>"}]},"apps":[],"jobName":"paragraph_1523338529551_-1345936332","id":"20180410-053529_1777379660","dateCreated":"2018-04-10T05:35:29+0000","dateStarted":"2018-04-10T05:44:11+0000","dateFinished":"2018-04-10T05:44:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5815"},{"text":"%md\n## P4 Clean Data - Replace wrong Artists\n\nBefore continuing with the analysis, we first create a cleaned version of the `artist_user_data` table with the `artist_alias` mapping applied. This means that we need to lookup each artist-id in the original data set in the alias data set and see if we find have a matching `bad_id` entry with a replacement `good_id`. The result should be stored in a variable `cleanedUserArtistData`. This DataFrame should contain the columns Finally select only the columns `user_id`, `artist_id` (the corrected one) and `play_count`\n\nHints:\n1. Join the user artist data DataFrame with the artist alias DataFrame containing fixes for some artists. Which join type is appropriate?\n2. Replace the artist-id in the user artists data with the `good_id` from the artist alias DataFrame - if a match is found on `bad_id`\n3. Finally select only the columns `user_id`, `artist_id` (the corrected one) and `play_count`","user":"anonymous","dateUpdated":"2018-04-10T06:14:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>P4 Clean Data - Replace wrong Artists</h2>\n<p>Before continuing with the analysis, we first create a cleaned version of the <code>artist_user_data</code> table with the <code>artist_alias</code> mapping applied. This means that we need to lookup each artist-id in the original data set in the alias data set and see if we find have a matching <code>bad_id</code> entry with a replacement <code>good_id</code>. The result should be stored in a variable <code>cleanedUserArtistData</code>. This DataFrame should contain the columns Finally select only the columns <code>user_id</code>, <code>artist_id</code> (the corrected one) and <code>play_count</code></p>\n<p>Hints:</p>\n<ol>\n<li>Join the user artist data DataFrame with the artist alias DataFrame containing fixes for some artists. Which join type is appropriate?</li>\n<li>Replace the artist-id in the user artists data with the <code>good_id</code> from the artist alias DataFrame - if a match is found on <code>bad_id</code></li>\n<li>Finally select only the columns <code>user_id</code>, <code>artist_id</code> (the corrected one) and <code>play_count</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1523339330542_1951907955","id":"20180410-054850_1118574695","dateCreated":"2018-04-10T05:48:50+0000","dateStarted":"2018-04-10T06:14:07+0000","dateFinished":"2018-04-10T06:14:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5816"},{"text":"val cleanedUserArtistData = user_artist_data.join(artist_alias, user_artist_data(\"artist_id\") === artist_alias(\"bad_id\"), \"left\")\n    .select(\n        user_artist_data(\"user_id\"), \n        coalesce(artist_alias(\"good_id\"), user_artist_data(\"artist_id\")).as(\"artist_id\"), \n        user_artist_data(\"play_count\")\n    )\n    \nz.show(cleanedUserArtistData, 10)    \n","user":"anonymous","dateUpdated":"2018-04-10T06:16:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cleanedUserArtistData: org.apache.spark.sql.DataFrame = [user_id: int, artist_id: int ... 1 more field]\n"},{"type":"TABLE","data":"user_id\tartist_id\tplay_count\n1000002\t1\t55\n1000002\t1000006\t33\n1000002\t1000007\t8\n1000002\t1000009\t144\n1000002\t1000010\t314\n1000002\t1000013\t8\n1000002\t1000014\t42\n1000002\t1000017\t69\n1000002\t1000024\t329\n1000002\t1000025\t1\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 10.</font>"}]},"apps":[],"jobName":"paragraph_1523338972600_632282169","id":"20180410-054252_1751602409","dateCreated":"2018-04-10T05:42:52+0000","dateStarted":"2018-04-10T05:59:33+0000","dateFinished":"2018-04-10T05:59:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5817"},{"text":"%md\n# Question 1: Artist with most unique listeners\n\nWho are the artist with the most unique listeners? For this question, it is irrelevant how often an individul user has played songs of a specific artist. It is only important how many different users have played each artists work. Of course we do not want to see the artist-id, but their real names as provided in the DataFrame `artist_data`!\n\nHints:\n1. Group cleaned data by `artist_id`\n2. Perform aggregation by counting unique user ids\n3. Join `artist_data`\n4. Lookup the artists name\n5. Sort result by descending user counts","user":"anonymous","dateUpdated":"2018-04-10T05:57:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Question 1: Artist with most unique listeners</h1>\n<p>Who are the artist with the most unique listeners? For this question, it is irrelevant how often an individul user has played songs of a specific artist. It is only important how many different users have played each artists work. Of course we do not want to see the artist-id, but their real names as provided in the DataFrame <code>artist_data</code>!</p>\n<p>Hints:</p>\n<ol>\n<li>Group cleaned data by <code>artist_id</code></li>\n<li>Perform aggregation by counting unique user ids</li>\n<li>Join <code>artist_data</code></li>\n<li>Lookup the artists name</li>\n<li>Sort result by descending user counts</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1523338551970_1238852752","id":"20180410-053551_1348623672","dateCreated":"2018-04-10T05:35:51+0000","dateStarted":"2018-04-10T05:57:59+0000","dateFinished":"2018-04-10T05:57:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5818"},{"text":"val result = cleanedUserArtistData\n    .groupBy(\"artist_id\")\n    .agg(countDistinct(\"user_id\").as(\"user_count\"))\n    .join(artist_data, cleanedUserArtistData(\"artist_id\") === artist_data(\"artist_id\"))\n    .select(col(\"artist_name\"), col(\"user_count\"))\n    .orderBy(col(\"user_count\").desc)\n\nz.show(result, 10)","user":"anonymous","dateUpdated":"2018-04-10T05:57:29+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"result: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [artist_name: string, user_count: bigint]\n"},{"type":"TABLE","data":"artist_name\tuser_count\nRadiohead\t45630\nGreen Day\t43883\nThe Beatles\t40919\nColdplay\t38497\nNirvana\t36823\nRed Hot Chili Peppers\t36036\nU2\t34853\nMetallica\t32337\nWeezer\t31951\n[unknown]\t31324\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 10.</font>"}]},"apps":[],"jobName":"paragraph_1523339280116_1234827951","id":"20180410-054800_976364716","dateCreated":"2018-04-10T05:48:00+0000","dateStarted":"2018-04-10T05:57:29+0000","dateFinished":"2018-04-10T05:58:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5819"},{"text":"%md\n# Question 2: Artist with most Plays\n\nNow we also take into account how often each user played the work of individual artists. That is, we also include the `play_coun` column into our calculations. So which artists have the most plays in total? Of course we do not want to see the artist-id, but their real names as provided in the DataFrame `artist_data`!\n\nHints:\n1. Group cleaned data by `artist_id`\n2. Perform aggregation by summing up play count\n3. Join `artist_data`\n4. Lookup the artists name\n5. Sort result by descending play counts\n","user":"anonymous","dateUpdated":"2018-04-10T05:58:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Question 2: Artist with most Plays</h1>\n<p>Now we also take into account how often each user played the work of individual artists. That is, we also include the <code>play_coun</code> column into our calculations. So which artists have the most plays in total? Of course we do not want to see the artist-id, but their real names as provided in the DataFrame <code>artist_data</code>!</p>\n<p>Hints:</p>\n<ol>\n<li>Group cleaned data by <code>artist_id</code></li>\n<li>Perform aggregation by summing up play count</li>\n<li>Join <code>artist_data</code></li>\n<li>Lookup the artists name</li>\n<li>Sort result by descending play counts</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1523339426272_-1198877408","id":"20180410-055026_1272692418","dateCreated":"2018-04-10T05:50:26+0000","dateStarted":"2018-04-10T05:58:26+0000","dateFinished":"2018-04-10T05:58:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5820"},{"text":"val result = cleanedUserArtistData\n    .groupBy(\"artist_id\")\n    .agg(sum(\"play_count\").as(\"play_count\"))\n    .join(artist_data, cleanedUserArtistData(\"artist_id\") === artist_data(\"artist_id\"))\n    .select(col(\"artist_name\"), col(\"play_count\"))\n    .orderBy(col(\"play_count\").desc)\n\nz.show(result, 10)\n","user":"anonymous","dateUpdated":"2018-04-10T05:59:38+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"result: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [artist_name: string, play_count: bigint]\n"},{"type":"TABLE","data":"artist_name\tplay_count\nRadiohead\t2502596\nThe Beatles\t2259825\nGreen Day\t1931143\nMetallica\t1543430\nSystem of a Down\t1426254\nPink Floyd\t1399665\nNine Inch Nails\t1361977\nModest Mouse\t1328969\nBright Eyes\t1234773\nNirvana\t1203348\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 10.</font>"}]},"apps":[],"jobName":"paragraph_1523339633382_91876886","id":"20180410-055353_270948625","dateCreated":"2018-04-10T05:53:53+0000","dateStarted":"2018-04-10T05:59:38+0000","dateFinished":"2018-04-10T06:00:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5821"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523339752024_-651488637","id":"20180410-055552_880825946","dateCreated":"2018-04-10T05:55:52+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:5822"}],"name":"Audio Scrobbler Statistics - Full","id":"2DC64SWRR","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}